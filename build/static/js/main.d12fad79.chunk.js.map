{"version":3,"sources":["components/header.js","components/todoInput.js","components/todoItem.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","React","Component","TodoInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","todoText","handleChange","bind","assertThisInitialized","addTodo","e","setState","target","todo","length","_this2","class","type","placeholder","onChange","onClick","TodoItem","id","removeTodo","className","text","App","todos","nextId","slice","push","filter","index","header_Header","todoInput_TodoInput","map","todoItem_TodoItem","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAIqBA,0LAEnB,OACAC,EAAAC,EAAAC,cAAA,wFAHkCC,IAAMC,YCDrBC,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,MAAOR,EAAKD,MAAMU,UAEhCT,EAAKU,aAAeV,EAAKU,aAAaC,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACpBA,EAAKa,QAAUb,EAAKa,QAAQF,KAAbV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KALEA,4EAQNc,GACXX,KAAKY,SAAS,CAACP,MAAOM,EAAEE,OAAOR,wCAGzBS,GACFA,EAAKC,OAAS,IAChBf,KAAKJ,MAAMc,QAAQI,GACnBd,KAAKY,SAAS,CAACP,MAAO,uCAIjB,IAAAW,EAAAhB,KACP,OACEV,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKyB,MAAM,eACT3B,EAAAC,EAAAC,cAAA,SAAOyB,MAAM,eAAeC,KAAK,OAAOC,YAAY,0IAA4Bd,MAAOL,KAAKI,MAAMC,MAAOe,SAAUpB,KAAKO,gBAExHjB,EAAAC,EAAAC,cAAA,OAAKyB,MAAM,eACX3B,EAAAC,EAAAC,cAAA,UAASyB,MAAM,eAAgBI,QAAS,kBAAML,EAAKN,QAAQM,EAAKZ,MAAMC,SAAtE,iDA3B+BZ,IAAMC,YCAxB4B,qBACnB,SAAAA,EAAY1B,GAAQ,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAsB,GAAAxB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwB,GAAAnB,KAAAH,KACZJ,4EAGG2B,GACTvB,KAAKJ,MAAM4B,WAAWD,oCAGf,IAAA1B,EAAAG,KACP,OACEV,EAAAC,EAAAC,cAAA,OAAKiC,UAAU,eACbnC,EAAAC,EAAAC,cAAA,UAAQyB,MAAM,iBAAmBI,QAAS,SAACV,GAAD,OAAMd,EAAK2B,WAAW3B,EAAKD,MAAM2B,MAA3E,oDAAmGvB,KAAKJ,MAAMkB,KAAKY,aAZrFjC,IAAMC,YCoD7BiC,cAhDb,SAAAA,EAAY/B,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,IACjB9B,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAxB,KAAAH,KAAMJ,KACDQ,MAAQ,CACXwB,MAAO,CACL,CAACL,GAAI,EAAGG,KAAM,yFACd,CAACH,GAAI,EAAGG,KAAM,yFACd,CAACH,GAAI,EAAGG,KAAM,8EAEhBG,OAAQ,GAGVhC,EAAKa,QAAUb,EAAKa,QAAQF,KAAbV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACfA,EAAK2B,WAAa3B,EAAK2B,WAAWhB,KAAhBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAZDA,uEAeXS,GACN,IAAIsB,EAAQ5B,KAAKI,MAAMwB,MAAME,QAC7BF,EAAMG,KAAK,CAACR,GAAIvB,KAAKI,MAAMyB,OAAQH,KAAMpB,IACzCN,KAAKY,SAAS,CACZgB,MAAOA,EACPC,SAAU7B,KAAKI,MAAMyB,4CAGdN,GACTvB,KAAKY,SAAS,CACVgB,MAAO5B,KAAKI,MAAMwB,MAAMI,OAAO,SAAClB,EAAMmB,GAAP,OAAiBnB,EAAKS,KAAOA,uCAIzD,IAAAP,EAAAhB,KACP,OACEV,EAAAC,EAAAC,cAAA,OAAKiC,UAAU,OACbnC,EAAAC,EAAAC,cAAA,OAAKiC,UAAU,gBACbnC,EAAAC,EAAAC,cAAC0C,EAAD,MACA5C,EAAAC,EAAAC,cAAC2C,EAAD,CAAW7B,SAAS,GAAGI,QAASV,KAAKU,UACrCpB,EAAAC,EAAAC,cAAA,MAAIyB,MAAM,mBAENjB,KAAKI,MAAMwB,MAAMQ,IAAI,SAACtB,GACpB,OAAOxB,EAAAC,EAAAC,cAAC6C,EAAD,CAAUvB,KAAMA,EAAMwB,IAAKxB,EAAKS,GAAIA,GAAIT,EAAKS,GAAIC,WAAYR,EAAKQ,yBAvCvE9B,aCME6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d12fad79.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nexport default class Header extends React.Component{\n\trender(){\n\t\treturn(\n\t\t<h1>Список справ</h1>\n\t\t);\n\t}\n}","import React from 'react';\nimport './todoInput.css';\n\nexport default class TodoInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: this.props.todoText};\n\n    this.handleChange = this.handleChange.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState({value: e.target.value});\n  }\n\n  addTodo(todo) {\n    if (todo.length > 0) {\n      this.props.addTodo(todo);\n      this.setState({value: ''});\n    }\n  }\n\n  render() {\n    return (\n      <div >\n      <div class=\"blockInline\">\n        <input class=\"form-control\" type=\"text\" placeholder=\"Введіть ваші справи сюди…\" value={this.state.value} onChange={this.handleChange} />\n        </div>\n        <div class=\"blockInline\">\n        <button  class=\"btn btn-info\"  onClick={() => this.addTodo(this.state.value)}>Додати</button>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './todoItem.css';\n\nexport default class TodoItem extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  removeTodo(id) {\n    this.props.removeTodo(id);\n  }\n\n  render() {\n    return (\n      <div className=\"todoWrapper\">\n        <button class=\"btn btn-danger\"   onClick={(e)=> this.removeTodo(this.props.id) }>Видалити</button>{this.props.todo.text}\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/header';\nimport ToDoInput from './components/todoInput';\nimport TodoItem from './components/todoItem';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [\n        {id: 0, text: \"Прочитати книгу\"},\n        {id: 1, text: \"Допомогти світу\"},\n        {id: 2, text: \"Виконати КПІЗ\"}\n      ],\n      nextId: 3\n    };\n\n    this.addTodo = this.addTodo.bind(this);\n    this.removeTodo = this.removeTodo.bind(this);\n  }\n\n  addTodo(todoText) {\n    let todos = this.state.todos.slice();\n    todos.push({id: this.state.nextId, text: todoText});\n    this.setState({\n      todos: todos,\n      nextId: ++this.state.nextId\n    });\n  }\n  removeTodo(id) {\n    this.setState({\n        todos: this.state.todos.filter((todo, index) => todo.id !== id)\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"todo-wrapper\">\n          <Header />\n          <ToDoInput todoText=\"\" addTodo={this.addTodo} />\n          <ul class=\"list-group-item\">\n            {\n              this.state.todos.map((todo) => {\n                return <TodoItem todo={todo} key={todo.id} id={todo.id} removeTodo={this.removeTodo}/>\n              })\n            }\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}